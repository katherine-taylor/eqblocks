

// Initialize Blockly with a workspace and toolbox
const workspace = Blockly.inject('blocklyDiv', {
    toolbox: document.getElementById('toolbox')
});

const equationGenerator = new Blockly.Generator('Equation');

// Run button to evaluate JavaScript code generated by Blockly
document.getElementById('runButton').addEventListener('click', () => {
    const code = equationGenerator.workspaceToCode(workspace);
    try {
        eval(code);
    } catch (e) {
        console.error("Error executing Blockly code:", e);
    }
});

// Block definitions
Blockly.defineBlocksWithJsonArray([
    {
        "type": "variable",
        "message0": "variable %1 with coefficient %2",
        "args0": [
            {
                "type": "field_input",
                "name": "VAR",
                "text": "x"
            },
            {
                "type": "input_value",
                "name": "COEFF",
                "check": "Number"
            }
        ],
        "output": "Array",
        "colour": 342,
        "tooltip": "Define a variable with a coefficient.",
        "helpUrl": ""
    },
    {
        "type": "constant",
        "message0": "constant %1",
        "args0": [
            {
                "type": "field_number",
                "name": "CONST",
                "value": 0
            }
        ],
        "output": "Number",
        "colour": 342,
        "tooltip": "Define a constant.",
        "helpUrl": ""
    },
    {
        "type": "expression",
        "message0": "expression with variable %1 and constant %2",
        "args0": [
         {
                "type": "input_value",
                "name": "VAR",
                "check": "Array"
        },
        {
                "type": "input_value",
                "name": "CONST",
                "check": "Number"
        }
    ],
        "output": "Array",
        "colour": 342,
        "tooltip": "An expression made up of a variable and a constant.",
        "helpUrl": ""
    },
    {
        "type": "equation",
        "message0": "equation %1 = %2",
        "args0": [
            {
                "type": "field_input",
                "name": "LEFT",
                "text": "2x + 5"
            },
            {
                "type": "field_input",
                "name": "RIGHT",
                "text": "11"
            }
        ],
        "output": "Equation",
        "colour": 342,
        "tooltip": "Enter an equation.",
        "helpUrl": ""
    },
    {
        "type": "add",
        "message0": "add %1 to both sides",
        "args0": [
            {
                "type": "input_value",
                "name": "NUM"
            }
        ],
        "previousStatement": null,
        "nextStatement": null,
        "colour": 54,
        "tooltip": "Add a constant or variable to both sides.",
        "helpUrl": ""
    },
    {
        "type": "subtract",
        "message0": "subtract %1 from both sides",
        "args0": [
            {
                "type": "input_value",
                "name": "NUM"
            }
        ],
        "previousStatement": null,
        "nextStatement": null,
        "colour": 54,
        "tooltip": "Subtract a constant from both sides.",
        "helpUrl": ""
    },
    {
        "type": "divide",
        "message0": "divide both sides by %1",
        "args0": [
            {
                "type": "input_value",
                "name": "NUM"
            }
        ],
        "previousStatement": null,
        "nextStatement": null,
        "colour": 54,
        "tooltip": "Divide both sides by a constant.",
        "helpUrl": ""
    },
    {
        "type": "multiply",
        "message0": "multiply both sides by %1",
        "args0": [
            {
                "type": "input_value",
                "name": "NUM"
            }
        ],
        "previousStatement": null,
        "nextStatement": null,
        "colour": 54,
        "tooltip": "Multiply both sides by a constant.",
        "helpUrl": ""
    },

    {
        "type": "equation_solver",
        "message0": "solve %1 with operations %2",
        "args0": [
            {
                "type": "input_value",
                "name": "EQUATION",
                "check": "Equation"
            },
            {
                "type": "input_statement",
                "name": "OPERATIONS"
            }
        ],
        "previousStatement": null,
        "nextStatement": null,
        "colour": 230,
        "tooltip": "Solve an equation by applying operations.",
        "helpUrl": ""
    },
]);

// Code generation for 'variable' block
equationGenerator.forBlock['variable'] = function(block) {
    const variableName = String(block.getFieldValue('VAR'));
    let coefficient = equationGenerator.valueToCode(block, 'COEFF', Blockly.JavaScript.ORDER_ATOMIC) || '1';

    // Convert the coefficient to a number
    coefficient = Number(coefficient);
    // Generate an array representing the variable with its coefficient
    return [`["${variableName}", ${coefficient}]`, Blockly.JavaScript.ORDER_ATOMIC];
};



// Code generation for 'constant' block
equationGenerator.forBlock['constant'] = function(block) {
    const constantValue = block.getFieldValue('CONST');
    return [`${constantValue}`, Blockly.JavaScript.ORDER_ATOMIC];
};

// Code generation for the 'equation' block
equationGenerator.forBlock['equation'] = function(block) {
    const left = block.getFieldValue('LEFT').trim();
    const right = block.getFieldValue('RIGHT').trim();
    
    // Function to parse an expression like "2x + 5" or "2x - 5" or "-2x + 5"
    function parseExpression(expression) {
        // Initialize the array to store the result: [[coefficient, variable], constant]
        let variablePart = [0, "x"];  // Default coefficient is 0 for the variable
        let constantPart = 0;

        // Split the expression into terms based on spaces or "+" or "-" operators
        // Match terms with optional signs (+/-) followed by digits and/or variable
        let terms = expression.match(/([+-]?\d*x?|[+-]?\d+)/g); // Match terms like "2x", "-3x", "5", "-7"

        if (terms) {
            terms.forEach(term => {
                // Handle variable terms (e.g., "2x", "-x", "-2x")
                if (term.includes("x")) {
                    // Extract coefficient (defaults to 1 or -1 if no number specified)
                    let coefficient = 1;

                    // If the term is "-x", the coefficient should be -1, and if it's "x", it should be 1
                    if (term === "x") {
                        coefficient = 1;
                    } else if (term === "-x") {
                        coefficient = -1;
                    } else {
                        // If there's a coefficient with the 'x' (e.g., "2x", "-2x"), extract it
                        coefficient = parseInt(term.replace("x" ,'')) || 1; // Parse the coefficient of x
                    }

                    // Assign the coefficient to the variable
                    variablePart = [coefficient, "x"];
                }
                // Handle constant terms (e.g., "5", "-5")
                else if (!isNaN(parseFloat(term))) {
                    constantPart += parseFloat(term); // Add the constant to the constant part
                }
            });
        }

        return [variablePart, constantPart];
    }

    // Parse the left and right sides of the equation
    const leftArray = parseExpression(left);
    const rightArray = parseExpression(right);
    
    // Return JavaScript code that initializes the left and right arrays
    return [
        `let x; // Declare the variable x\n` +  // Declare x to avoid the "not defined" error
        `let left = ${JSON.stringify(leftArray)}; let right = ${JSON.stringify(rightArray)};`,
        Blockly.JavaScript.ORDER_ATOMIC
    ];
};



// Code generation for 'add' block (statement block, returns string only)
equationGenerator.forBlock['add'] = function(block) {
    const num = equationGenerator.valueToCode(block, 'NUM', Blockly.JavaScript.ORDER_ATOMIC);
    return `left[1] += ${num}; right[1] += ${num};\n`;
};

// Code generation for 'subtract' block (statement block, returns string only)
equationGenerator.forBlock['subtract'] = function(block) {
    const num = equationGenerator.valueToCode(block, 'NUM', Blockly.JavaScript.ORDER_ATOMIC);
    return `left[1] -= ${num}; right[1] -= ${num};\n`;
};

// Code generation for 'multiply' block (statement block, returns string only)
equationGenerator.forBlock['multiply'] = function(block) {
    const num = equationGenerator.valueToCode(block, 'NUM', Blockly.JavaScript.ORDER_ATOMIC);
    return `left[1] *= ${num}; left[0][0] *= ${num}; right[1] *= ${num};\n`;
};

// Code generation for 'divide' block (statement block, returns string only)
equationGenerator.forBlock['divide'] = function(block) {
    const num = equationGenerator.valueToCode(block, 'NUM', Blockly.JavaScript.ORDER_ATOMIC);
    return `left[1] /= ${num}; left[0][0] /= ${num}; right[1] /= ${num};\n`;
};

// JavaScript code generation for 'solve_equation'
equationGenerator.forBlock['equation_solver'] = function(block) {
    const equation = equationGenerator.valueToCode(block, 'EQUATION', Blockly.JavaScript.ORDER_ATOMIC);
    const operations = equationGenerator.statementToCode(block, 'OPERATIONS');
    const code = `
        // Initialize left and right sides of the equation
        ${equation};
        // Apply operations
        ${operations};
        // Output final equation and check if it is solved
        const result = "Final Equation: " + left[0][0]+left[0][1] + " + " + left[1] + " = " + right[0][0] +right[0][1] + " + " + right[1];
        // Display the result on the webpage
        document.getElementById('outputContainer').innerText = result;
    `;
    
    return code;
};

equationGenerator.scrub_ = function(block, code, thisOnly) {
    const nextBlock =
        block.nextConnection && block.nextConnection.targetBlock();
    if (nextBlock && !thisOnly) {
      return code + '\n' + equationGenerator.blockToCode(nextBlock);
    }
    return code;
  };
